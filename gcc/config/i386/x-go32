# CYGNUS LOCAL WTF/law
# This is ugly but x-go32 is only ever used in a Canadian cross
# and passing down all these things as environment variables is
# amazingly tedious and error prone.
HOST_CC=gcc
HOST_CFLAGS=
CFLAGS=-O2 -fno-omit-frame-pointer
HOST_PREFIX=foo
HOST_PREFIX_1=foo
RANLIB=i386-go32-ranlib
AR=i386-go32-ar
GCC_FOR_TARGET=${target}-gcc
AR_FOR_TARGET=${target}-ar
RANLIB_FOR_TARGET=${target}-ranlib
CLIB=-lm
CC=i386-go32-gcc
# FIXME: This should be done in a better way, but how?  The problem is
# that we can't build protoize.
LANGUAGES=c c++

# FIXME: Until collect supports DOS, don't use it.
USE_COLLECT2 =
# END CYGNUS LOCAL

# translate the version string, so it can be used on DJGPP, where only
# one dot in filename is allowed

# to avoid recursion when redefining $(version)
_version:=$(version)
__version=$(subst ., ,$(_version))
version=$(word 1,$(__version))$(word 2,$(__version)).$(word 3,$(__version))

SYSTEM_HEADER_DIR=$(DJDIR)/include
X_CPPFLAGS=-DSTANDARD_INCLUDE_DIR=\"\$$DJDIR/include\" \
	   -DSTANDARD_INCLUDE_COMPONENT=\"\"

# when building a native compiler for DJGPP, make the target_alias
# a shorter name, since otherwise it will produce some problems, when
# using the same gcc once with long filenames and once with short (8+3)
# filenames
ifeq ($(findstring -pc-msdosdjgpp,$(target_alias)),-pc-msdosdjgpp)
target_alias=djgpp
endif

# on DJGPP the 'ln -s' does not work correctly
LN = cp -p
LN_S = cp -p
