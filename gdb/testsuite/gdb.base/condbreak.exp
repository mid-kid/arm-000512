# Copyright (C) 1997, 1998 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@prep.ai.mit.edu

# This test was written by Rich Title. 
# Purpose is to test conditional breakpoints.
# Modeled after "break.exp".



if $tracelevel then {
	strace $tracelevel
	}

global usestubs

#
# test running programs
#
set prms_id 0
set bug_id 0

set testfile "condbreak"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug additional_flags=-w}] != "" } {
    gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}


if [target_info exists gdb_stub] {
    gdb_step_for_stub;
}

#
# test break at function
#
gdb_test "break main" \
    "Breakpoint.*at.* file .*$srcfile, line.*" \
    "breakpoint function"

# 
# test conditional break at function
#
gdb_test "break marker1 if 1==1" \
    "Breakpoint.*at.* file .*$srcfile, line.*" \
    "break function if condition"

gdb_test "delete 2" \
    "" \
    "delete break"

#
# test conditional break at line number
#
gdb_test "break 64 if 1==1" \
    "Breakpoint.*at.* file .*$srcfile, line 64\\." \
    "break line if condition"

gdb_test "delete 3" \
    "" \
    "delete break"

# 
# test conditional break at function
#
gdb_test "break marker1 if (1==1)" \
    "Breakpoint.*at.* file .*$srcfile, line.*" \
    "break function if (condition)"

#
# test conditional break at line number
#
gdb_test "break 64 if (1==1)" \
    "Breakpoint.*at.* file .*$srcfile, line 64\\." \
    "break line if (condition)"

gdb_test "break marker2 if (a==43)" \
    "Breakpoint.*at.* file .*$srcfile, line.*" \
    "break function if (condition)"

#
# check to see what breakpoints are set
#

set main_line 60
gdb_test "info break" \
    "Num Type\[ \]+Disp Enb Address\[ \]+What.*
\[0-9\]+\[\t \]+breakpoint     keep y.* in main at .*$srcfile:$main_line.*
\[0-9\]+\[\t \]+breakpoint     keep y.* in marker1 at .*$srcfile:41.*
\[\t \]+stop only if 1 == 1.*
\[0-9\]+\[\t \]+breakpoint     keep y.* in main at .*$srcfile:64.*
\[\t \]+stop only if 1 == 1.*
\[0-9\]+\[\t \]+breakpoint     keep y.* in marker2 at .*$srcfile:42.*
\[\t \]+stop only if a == 43.*" \
    "breakpoint info"


#
# run until the breakpoint at main is hit. For non-stubs-using targets.
#
gdb_test "run" \
    "Starting program.*Breakpoint \[0-9\]+,.*main .*argc.*argv.* at .*$srcfile:60.*60\[\t \]+if .argc.* \{.*" \
"run until function breakpoint"

#
# run until the breakpoint at a line number
#
gdb_test "continue" "Continuing\\..*Breakpoint \[0-9\]+, main \\(argc=.*, argv=.*, envp=.*\\) at .*$srcfile:64.*64\[\t \]+printf.*factorial.*" \
			"run until breakpoint set at a line number"

#
# run until the breakpoint at marker1
#
gdb_test "continue" "Continuing\\..*Breakpoint \[0-9\]+, marker1 \\(\\) at .*$srcfile:41.*41\[\t \]+.*" \
			"run until breakpoint at marker1"

#
# run until the breakpoint at marker2
#
gdb_test "continue" "Continuing\\..*Breakpoint \[0-9\]+, marker2 \\(a=43\\) at .*$srcfile:42.*42\[\t \]+.*" \
			"run until breakpoint at marker2"














