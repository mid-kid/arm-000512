# Copyright (C) 1998 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@prep.ai.mit.edu

# written by Elena Zannoni (ezannoni@cygnus.com)

# This file is part of the gdb testsuite
#
# tests for reference types
# with short type variables.
# 

if $tracelevel then {
        strace $tracelevel
        }

#
# test running programs
#
set prms_id 0
set bug_id 0

set testfile "ref-types"
set srcfile ${testfile}.cc
set binfile ${objdir}/${subdir}/${testfile}

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug c++}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}


#
# set it up at a breakpoint so we can play with the variable values
#
if ![runto_main] then {
    perror "couldn't run to breakpoint"
    continue
}

send_gdb "break marker1\n" ; gdb_expect -re ".*$gdb_prompt $"

    send_gdb "cont\n"
    gdb_expect {
        -re "Break.* marker1 \\(\\) at .*:$decimal.*$gdb_prompt $" {
            send_gdb "up\n"
            gdb_expect {
                -re ".*$gdb_prompt $" {}
                timeout { fail "up from marker1" }
            }
        }
        -re "$gdb_prompt $" { fail "continue to marker1"  }
        timeout { fail "(timeout) continue to marker1"  }
    }


proc gdb_start_again {} {
global srcdir
global subdir
global binfile
global gdb_prompt
global decimal

gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

source ${binfile}.ci

#
# set it up at a breakpoint so we can play with the variable values
#
if ![runto_main] then {
    perror "couldn't run to breakpoint"
    continue
}

send_gdb "break marker1\n" ; gdb_expect -re ".*$gdb_prompt $"

    send_gdb "cont\n"
    gdb_expect {
        -re "Break.* marker1 \\(\\) at .*:$decimal.*$gdb_prompt $" {
            send_gdb "up\n"
            gdb_expect {
                -re ".*$gdb_prompt $" {}
                timeout { fail "up from marker1" }
            }
        }
        -re "$gdb_prompt $" { fail "continue to marker1"  }
        timeout { fail "(timeout) continue to marker1"  }
    }
}





send_gdb "print s\n"
gdb_expect {
    -re ".\[0-9\]* = -1.*$gdb_prompt $" {
        pass "print value of s"
      }
    -re ".*$gdb_prompt $" { fail "print value of s" }
    timeout           { fail "(timeout) print value of s" }
  }


send_gdb "ptype s\n"
gdb_expect {
    -re "type = short.*$gdb_prompt $"  { pass "ptype s" }
    -re ".*$gdb_prompt $"   {  fail "ptype s" }
    timeout             { fail "(timeout) ptype s" }
}


send_gdb "print *ps\n"
gdb_expect {
    -re ".\[0-9\]* = -1.*$gdb_prompt $" {
        pass "print value of ps"
      }
    -re ".*$gdb_prompt $" { fail "print value of ps" }
    timeout           { fail "(timeout) print value of ps" }
  }


send_gdb "ptype ps\n"
gdb_expect {
    -re "type = short \*.*$gdb_prompt $"  { pass "ptype ps" }
    -re ".*$gdb_prompt $"   {  fail "ptype ps" }
    timeout             { fail "(timeout) ptype ps" }
}

send_gdb "print as\[0\]\n"
gdb_expect {
    -re ".\[0-9\]* = 0.*$gdb_prompt $" {
        pass "print value of as\[0\]"
      }
    -re ".*$gdb_prompt $" { fail "print value of as\[0\]" }
    timeout           { fail "(timeout) print value of as\[0\]" }
  }


send_gdb "ptype as\n"
gdb_expect {
    -re "type = short \\\[4\\\].*$gdb_prompt $"  { pass "ptype as" }
    -re ".*$gdb_prompt $"   {  fail "ptype as" }
    timeout             { fail "(timeout) ptype as" }
}

send_gdb "print as\[1\]\n"
gdb_expect {
    -re ".\[0-9\]* = 1.*$gdb_prompt $" {
        pass "print value of as\[1\]"
      }
    -re ".*$gdb_prompt $" { fail "print value of as\[1\]" }
    timeout           { fail "(timeout) print value of as\[1\]" }
  }

send_gdb "print as\[2\]\n"
gdb_expect {
    -re ".\[0-9\]* = 2.*$gdb_prompt $" {
        pass "print value of as\[2\]"
      }
    -re ".*$gdb_prompt $" { fail "print value of as\[2\]" }
    timeout           { fail "(timeout) print value of as\[2\]" }
  }

send_gdb "print as\[3\]\n"
gdb_expect {
    -re ".\[0-9\]* = 3.*$gdb_prompt $" {
        pass "print value of as\[3\]"
      }
    -re ".*$gdb_prompt $" { fail "print value of as\[3\]" }
    timeout           { fail "(timeout) print value of as\[3\]" }
  }

send_gdb "print rs\n"
gdb_expect {
    -re ".\[0-9\]* = \\(short &\\) @$hex: -1.*$gdb_prompt $" {
        pass "print value of rs"
      }
    -re ".*$gdb_prompt $" { fail "print value of rs" }
    timeout           { fail "(timeout) print value of rs" }
    eof { fail "print rs ($GDB dumped core) (FIXME)" ; gdb_start_again ; }

  }

send_gdb "ptype rs\n"
gdb_expect {
    -re "type = short &.*$gdb_prompt $"  { pass "ptype rs" }
    -re ".*$gdb_prompt $"   {  fail "ptype rs" }
    timeout             { fail "(timeout) ptype rs" }
}


send_gdb "print *rps\n"
gdb_expect {
    -re ".\[0-9\]* = -1.*$gdb_prompt $" {
        pass "print value of *rps"
      }
    -re ".*$gdb_prompt $" { fail "print value of *rps" }
    timeout           { fail "(timeout) print value of *rps" }
  }


send_gdb "ptype rps\n"
gdb_expect {
    -re "type = short \\*&.*$gdb_prompt $"  { pass "ptype rps" }
    -re ".*$gdb_prompt $"   {  fail "ptype rps" }
    timeout             { fail "(timeout) ptype rps" }
}



send_gdb "print ras\[0\]\n"
gdb_expect {
    -re ".\[0-9\]* = 0.*$gdb_prompt $" {
        pass "print value of ras\[0\]"
      }
    -re ".*$gdb_prompt $" { fail "print value of ras\[0\]" }
    timeout           { fail "(timeout) print value of ras\[0\]" }
  }


send_gdb "ptype ras\n"
gdb_expect {
    -re "type = short \\\(&\\\)\\\[4\\\].*$gdb_prompt $"  { pass "ptype ras" }
    -re ".*$gdb_prompt $"   {  fail "ptype ras" }
    timeout             { fail "(timeout) ptype ras" }
}

send_gdb "print ras\[1\]\n"
gdb_expect {
    -re ".\[0-9\]* = 1.*$gdb_prompt $" {
        pass "print value of ras\[1\]"
      }
    -re ".*$gdb_prompt $" { fail "print value of ras\[1\]" }
    timeout           { fail "(timeout) print value of ras\[1\]" }
  }

send_gdb "print ras\[2\]\n"
gdb_expect {
    -re ".\[0-9\]* = 2.*$gdb_prompt $" {
        pass "print value of ras\[2\]"
      }
    -re ".*$gdb_prompt $" { fail "print value of ras\[2\]" }
    timeout           { fail "(timeout) print value of ras\[2\]" }
  }

send_gdb "print ras\[3\]\n"
gdb_expect {
    -re ".\[0-9\]* = 3.*$gdb_prompt $" {
        pass "print value of ras\[3\]"
      }
    -re ".*$gdb_prompt $" { fail "print value of ras\[3\]" }
    timeout           { fail "(timeout) print value of ras\[3\]" }
  }
